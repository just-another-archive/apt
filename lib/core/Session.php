<?php

	class Session
	{
		public static $id = NULL;
		public static $name = 'PHPSESSID';
		public static $ttl = 45;

		public static function token()
		{
			$token = uniqid(md5(microtime()), true);
			self::flash('token', $token, self::$ttl);

			return $token;
		}

		public static function regenerate() { session_regenerate_id(false); }

		public static function ssid($object = null)
		{
			switch($object)
			{
				case 'serialize' : 	return Session::$name.'='.Session::$id;	
				case '&serialize' : return '&'.Session::$name.'='.Session::$id;
				case 'input' : 		return "<input type='hidden' name='".Session::$name."' value='".Session::$id."' />";
				case null : 		return Session::$name.":'".Session::$id."'";
				default : 			return $object.".".Session::$name." = '".Session::$id."';";
			}
		}

		public static function start()
		{
			self::$name = ini_get('session.name');

			$ttl = (60 * self::$ttl);
			$secure = App::ssl(App::$name, false);
			$httponly = true;
			
			session_set_cookie_params($ttl, '/', '.'.App::$domain, $secure, $httponly);
			$t = time() + $ttl;

			if (isset($_POST[self::$name]) && !empty($_POST[self::$name])) { session_id($_POST[self::$name]); }
			session_start();
			
			$u  = isset($_SERVER["HTTP_USER_AGENT"]) ? $_SERVER["HTTP_USER_AGENT"] : '';
			$u .= isset($_SERVER["HTTP_ACCEPT_LANGUAGE"]) ? $_SERVER["HTTP_ACCEPT_LANGUAGE"] : '';
			$u .= isset($_SERVER["HTTP_ACCEPT_ENCODING"]) ? $_SERVER["HTTP_ACCEPT_ENCODING"] : '';

			if(!isset($_COOKIE[session_name()]) && !isset($_POST[self::$name]))
			{
				$collided = false;
				$previous_session_id = session_id();
			
				if (count($_SESSION) > 0 && !isset($_POST[self::$name]))
				{
					session_regenerate_id(false);
					$collided = true;
				}

				$_SESSION['safe'] = true;
				$_SESSION['safe_ttl'] = $t;
				$_SESSION['safe_key'] = md5($u);

				if ($collided)
				{
					self::log("Session collision, reloaded an existing session ".$previous_session_id);
					App::error(401, 'Veuillez vider vos cookies (1)');
				}
			}
			else
			{
				if (!isset($_SESSION['safe']))
				{
					setcookie(session_name(), session_id(), time() - 3600, '/', '.'.App::$domain, $secure, $httponly);
					self::log("Unknown session, reloaded an existing session that was not generated by this application : ".session_id());
					App::error(401, 'Veuillez vider vos cookies (2)');
				}

				if ($_SESSION['safe_ttl'] < time())
				{
					setcookie(session_name(), session_id(), time() - 3600, '/', '.'.App::$domain, $secure, $httponly);
					self::log("Session expired, attempted to use an expired session : " . session_id());
					App::error(401, 'Veuillez vider vos cookies (3)');
				}

				if ($_SESSION['safe_key'] != md5($u))
				{
					setcookie(session_name(), session_id(), time() - 3600, '/', '.'.App::$domain, $secure, $httponly);
					self::log("Session hijacking, attempted to use an existing session, provided key '".md5($u)."' stored key '".$_SESSION['safe_key']."' : ".session_id());
					App::error(401, 'Veuillez vider vos cookies (4)');
				}

				$_SESSION['safe_ttl'] = $t;

				if (!isset($_COOKIE[session_name()]))
				{ setcookie(session_name(), session_id(), $t, '/', '.'.App::$domain, $secure, $httponly); }
			}
			
			self::$id = session_id();
			
			if (isset($_POST[self::$name])) { unset($_POST[self::$name]); }

			App::debug('Session ID: '.self::$id);	
		}

		public static function get($name) { return isset($_SESSION[$name]) ? $_SESSION[$name] : new Blank(); }
		public static function set($name, $value) { $_SESSION[$name] = $value; }
		public static function delete($name, $flash = false)
		{
			if ($false === false)
			{
				if (isset($_SESSION[$name]))
				{
					unset($_SESSION[$name]);
					return true;
				}
				else { return false; }
			}
			else
			{
				if (isset($_SESSION['__flash__']) && isset($_SESSION['__flash__']->$name))
				{
					unset($_SESSION['__flash__']->$name);
					return true;
				}
				else { return false; }
			}
		}
		
		public static function flush($auth = false, $flash = true)
		{
			$system = array('safe', 'safe_ttl', 'safe_key');
				if ($auth === false) { array_push($system, 'admin', 'admin_auth'); }
				if ($flash === false) { array_push($system, '__flash__'); }

			foreach($_SESSION as $k => $v)
			{ if (!in_array($k, $system)) { unset($_SESSION[$k]); } }
		}

		public static function flash($name, $value = null, $ttl = 0)
		{
			if (!isset($_SESSION['__flash__']) || empty($_SESSION['__flash__'])) { $_SESSION['__flash__'] = new StdClass(); }

			$accessor = func_num_args() == 1 ? 'get' : 'set';
			$flash = $_SESSION['__flash__'];

			if ($accessor == 'get')
			{
				$data = new Blank();

				if (isset($flash->$name))
				{
					if ($flash->$name->ttl == 0 || $flash->$name->ttl < time())
					{ $data = $flash->$name->value; }
					unset($flash->$name);
				}

				return $data;
			}

			if ($accessor == 'set')
			{
				$flash->$name->ttl = $ttl != 0 ? time() + $ttl : 0;
				$flash->$name->value = $value;
			}
		}

		public static function log($msg, $mail = false)
		{
			$output = 0;

			$filename = App::$path.'/log/session_safe.log';
			$event = date('c').'\t'.$msg.'\n';

			if (is_writable($filename))
			{
				if (!$handle = fopen($filename, 'a')) { $output = -1; exit; }
			    if (fwrite($handle, $event) === FALSE) { $output = -2; exit; }

			    $output = 1; fclose($handle);
			}
			else { $output = -1; }
			
			if ($mail)
			{
				$to      = App::$admn;
				$subject = 'SONY - Dev env. Session Safe Log Event';
				$message = "-- Session Safe Log Event --\n" . $event;
				$headers = 'From: dev.promotion@sony.fr' . "\r\n" . 'X-Mailer: PHP/' . phpversion();

				mail($to, $subject, $message, $headers);

				$output = ($output == 1) ? 3 : 2;
			}

			return $output;
		}

	}
	
	
	
	
	
	
	
	
	
	
	
	class Cookie
	{
		public static function get($name) { return isset($_COOKIE[$name]) ? $_COOKIE[$name] : ''; }
		public static function set($name, $value, $expiry)
		{
			$secure = App::ssl(App::$name, false);
			$httponly = true;
		
			setcookie($name, $value, time() + $expiry, '/', '.'.App::$domain, $secure, $httponly);
		}
	}
	
?>